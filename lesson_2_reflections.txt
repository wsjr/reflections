1) What happens when you initialize a repository? Why do you need to do it?

I creates a repository. You need it if you want to store and track files in git.


2) How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area is different from working directory because this is where the files you want to be commited to the repository will be placed. It differs from repository as these will contain the files that will update the same files in the repository. It helps you separate files you want to commit soon to the files that you're not ready to commit yet.

3) How can you use the staging area to make sure you have one commit per logical change?

You use staging area to keep track of the logical changes you want to commit.
You can do this by doing "git diff --staged"

4) What are some situations when branches would be helpful in keeping your history organized? How would branches help?

- When trying to fix an issue
- When implementing new feature

Branches help isolate your changes from master branch. This ensures that you are not compromising the master branch in any way.

5) How do the diagrams help you visualize the branch structure?

Helps you visualize which branch has spawned from another branch and commits asoociated with it.

6)What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Combines the changes from the two branches into one commit. It easier to see the changes from different branch from the diagram.

7)What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Pros of Git's automatic merging
- Handles most the mundane tasks of merging.

Cons of Git's automatic merging
- It will introduce bugs if the changes happen in the same block of code.
- There's no easy way to merge code in the same block of code yet. It still need human intervention.

